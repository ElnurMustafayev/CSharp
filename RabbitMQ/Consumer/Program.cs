using RabbitMQ.Client;
using RabbitMQ.Client.Events;
using System.Text;

namespace Consumer;

public class Program
{
    public static void Main()
    {
        var factory = new ConnectionFactory() { HostName = "localhost" };

        // connect to RabbitMQ listener on "localhost"
        using var connection = factory.CreateConnection();
        // create connection
        using var channel = connection.CreateModel();

        // use or create <queue>
        channel.QueueDeclare(queue: "dev-queue",        // <queue> name (if "" - will autogenerated)
                                durable: false,         // will survive if broker restart
                                exclusive: false,       // delete if connection closed?
                                autoDelete: false,      // delete when the last consumer will unconnect?
                                arguments: null);       // optional arguments <key: string, value: object>

        // create <consumer> object
        var consumer = new EventingBasicConsumer(channel);

        // add event to receive message
        string message = string.Empty;
        consumer.Received += (sender, e) =>
        {
            var body = e.Body;
            message = Encoding.UTF8.GetString(body.ToArray());
            Console.WriteLine($"'{message}' message was received by default exchange!");
        };

        // <queue> <---> <consumer>
        channel.BasicConsume(queue: "dev-queue",        // <queue>
                                autoAck: false,         // remove from queue
                                consumer: consumer);    // <consumer>

        Console.ReadKey();
    }
}